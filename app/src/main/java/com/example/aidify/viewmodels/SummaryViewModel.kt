package com.example.aidify.viewmodels

import android.content.Context
import android.graphics.pdf.PdfDocument
import android.os.Environment
import android.widget.Toast
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import com.example.aidify.R
import com.example.aidify.models.ParticipantData
import java.io.File
import java.io.FileOutputStream
import java.io.IOException
import androidx.compose.runtime.State


class SummaryViewModel(private val state: State<ParticipantData>) : ViewModel() {

    var isPdfGenerated by mutableStateOf(false)
        private set

    fun getFeedback(): String? = state.value.result.summary.feedback

    fun getDiagnosis(): String? = state.value.result.summary.assessment

    fun getRiskOfAbuse(): String? = state.value.result.summary.abuseRisk

    fun generatePdf(context: Context) {
        val pdfDocument = PdfDocument()
        val pageInfo = PdfDocument.PageInfo.Builder(300, 600, 1).create()
        val page = pdfDocument.startPage(pageInfo)

        val paint = android.graphics.Paint().apply {
            textSize = 16f
            color = android.graphics.Color.BLACK
        }

        val canvas = page.canvas
        var yPosition = 50
        canvas.drawText(context.getString(R.string.pdf_summary_title), 80f, yPosition.toFloat(), paint)

        yPosition += 30
        getFeedback()?.let { feedback ->
            val feedbackText = context.getString(R.string.pdf_feedback, feedback)
            canvas.drawText(feedbackText, 80f, yPosition.toFloat(), paint)
            yPosition += 30
        }

        getDiagnosis()?.let { diagnosis ->
            canvas.drawText("Diagnosis: $diagnosis", 80f, yPosition.toFloat(), paint)
            yPosition += 30
        }

        getRiskOfAbuse()?.let { risk ->
            canvas.drawText("Risk of Abuse: $risk", 80f, yPosition.toFloat(), paint)
        }

        pdfDocument.finishPage(page)

        val directory = context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS)
        val fileName = "Aidify_Summary_${System.currentTimeMillis()}.pdf"
        val file = File(directory, fileName)

        try {
            pdfDocument.writeTo(FileOutputStream(file))
            val successMessage = context.getString(R.string.pdf_save_success, file.absolutePath)
            Toast.makeText(context, successMessage, Toast.LENGTH_LONG).show()
            isPdfGenerated = true
        } catch (e: IOException) {
            e.printStackTrace()
            Toast.makeText(context, context.getString(R.string.pdf_save_error), Toast.LENGTH_SHORT).show()
            isPdfGenerated = false
        } finally {
            pdfDocument.close()
        }
    }
}
