package com.example.aidify.viewmodels

import android.content.Context
import android.graphics.pdf.PdfDocument
import android.os.Environment
import android.widget.Toast
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import com.example.aidify.R
import com.example.aidify.models.Organization
import com.example.aidify.models.ParticipantData
import com.example.aidify.models.Summary
import java.io.File
import java.io.FileOutputStream
import java.io.IOException

class SummaryViewModel : ViewModel() {
    var participantData by mutableStateOf(ParticipantData())
        private set

    var isPdfGenerated by mutableStateOf(false)
        private set


    fun updateParticipantData(data: ParticipantData) {
        participantData = data
    }

    fun updateSummary(summary: Summary) {
        participantData = participantData.updateSummary(summary)
    }

    fun addOrganization(organization: Organization) {
        participantData = participantData.addOrganization(organization)
    }

    fun updatePdfGenerationStatus(status: Boolean) {
        isPdfGenerated = status
    }

    fun resetData() {
        participantData = ParticipantData()
    }

    fun generatePdf(context: Context) {
        val pdfDocument = PdfDocument()
        val pageInfo = PdfDocument.PageInfo.Builder(300, 600, 1).create()
        val page = pdfDocument.startPage(pageInfo)

        val paint = android.graphics.Paint().apply {
            textSize = 16f
            color = android.graphics.Color.BLACK
        }

        val canvas = page.canvas
        var yPosition = 50
        canvas.drawText(context.getString(R.string.pdf_summary_title), 80f, yPosition.toFloat(), paint)

        yPosition += 30
        participantData.result.summary.feedback?.let { feedback ->
            val feedbackText = context.getString(R.string.pdf_feedback, feedback)
            canvas.drawText(feedbackText, 80f, yPosition.toFloat(), paint)
        }

        pdfDocument.finishPage(page)

        val directory = context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS)
        val file = File(directory, "Aidify_Summary.pdf")

        try {
            pdfDocument.writeTo(FileOutputStream(file))
            val successMessage = context.getString(R.string.pdf_save_success, file.absolutePath)
            Toast.makeText(context, successMessage, Toast.LENGTH_LONG).show()
            updatePdfGenerationStatus(true)
        } catch (e: IOException) {
            e.printStackTrace()
            Toast.makeText(context, context.getString(R.string.pdf_save_error), Toast.LENGTH_SHORT).show()
            updatePdfGenerationStatus(false)
        } finally {
            pdfDocument.close()
        }
    }
}
